;;; Exercise 2.3 representing rectangles
; no matter how you define make-rec, you can still use (perimeter rec) and (area rec).
(load "ex2-2.scm")

(define (perimeter rec)
    (let ((x (len-of-rec rec))
          (y (wid-of-rec rec)))
          (newline)
          (display "perimeter is: ")
          (display (* 2 (+ x y)))))
(define (area rec)
    (let ((x (len-of-rec rec))
          (y (wid-of-rec rec)))
          (newline)
          (display "area is: ")
          (display (* x y))))
; first representation: specify the length and width
;(define (make-rec x y)
;    (cons x y))
;(define (len-of-rec rec)
;    (car rec))
;(define (wid-of-rec rec)
;    (cdr rec))
;(perimeter (make-rec 1 3))
;(area (make-rec 1 3))
; second representation: specify the origin (x1,y1) and top-right point (x2, y2)
(define (make-rec origin top-right)
    (cons origin top-right))
(define (get-origin rec)
    (car rec))
(define (get-top-right rec)
    (cdr rec))
(define (len-of-rec rec)
    (let ((origin (get-origin rec))
          (top-right (get-top-right rec)))
         (- (x-point top-right) (x-point origin))))
(define (wid-of-rec rec)
    (let ((origin (get-origin rec))
          (top-right (get-top-right rec)))
         (- (y-point top-right) (y-point origin))))
;(len-of-rec (make-rec (make-point 0 0) (make-point 3 4)))
;(wid-of-rec (make-rec (make-point 0 0) (make-point 3 4)))
(perimeter (make-rec (make-point 0 0) (make-point 3 4)))
(area (make-rec (make-point 0 0) (make-point 3 4)))
