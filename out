MIT/GNU Scheme running under GNU/Linux
Type `^C' (control-C) followed by `H' to obtain information about interrupts.

Copyright (C) 2011 Massachusetts Institute of Technology
This is free software; see the source for copying conditions. There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Image saved on Tuesday February 6, 2018 at 6:31:25 PM
  Release 9.1.1     || Microcode 15.3 || Runtime 15.7 || SF 4.41
  LIAR/x86-64 4.118 || Edwin 3.116

1 ]=> ;; A simulator for digital circuits
(define a (make-wire))
;Unbound variable: make-wire
;To continue, call RESTART with an option number:
; (RESTART 3) => Specify a value to use instead of make-wire.
; (RESTART 2) => Define make-wire to a given value.
; (RESTART 1) => Return to read-eval-print level 1.

2 error> (define b (make-wire))
;Unbound variable: make-wire
;To continue, call RESTART with an option number:
; (RESTART 4) => Specify a value to use instead of make-wire.
; (RESTART 3) => Define make-wire to a given value.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

3 error> (define c (make-wire))
;Unbound variable: make-wire
;To continue, call RESTART with an option number:
; (RESTART 5) => Specify a value to use instead of make-wire.
; (RESTART 4) => Define make-wire to a given value.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

4 error> (define d (make-wire))
;Unbound variable: make-wire
;To continue, call RESTART with an option number:
; (RESTART 6) => Specify a value to use instead of make-wire.
; (RESTART 5) => Define make-wire to a given value.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

5 error> (define e (make-wire))
;Unbound variable: make-wire
;To continue, call RESTART with an option number:
; (RESTART 7) => Specify a value to use instead of make-wire.
; (RESTART 6) => Define make-wire to a given value.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

6 error> (define s (make-wire))
;Unbound variable: make-wire
;To continue, call RESTART with an option number:
; (RESTART 8) => Specify a value to use instead of make-wire.
; (RESTART 7) => Define make-wire to a given value.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

7 error> ; input signals and output signals
(or-gate a b d)
;Unbound variable: d
;To continue, call RESTART with an option number:
; (RESTART 9) => Specify a value to use instead of d.
; (RESTART 8) => Define d to a given value.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

8 error> (and-gate a b c)
;Unbound variable: c
;To continue, call RESTART with an option number:
; (RESTART 10) => Specify a value to use instead of c.
; (RESTART 9) => Define c to a given value.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

9 error> (inverter c e)
;Unbound variable: e
;To continue, call RESTART with an option number:
; (RESTART 11) => Specify a value to use instead of e.
; (RESTART 10) => Define e to a given value.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

10 error> (and-gate d e s)
;Unbound variable: s
;To continue, call RESTART with an option number:
; (RESTART 12) => Specify a value to use instead of s.
; (RESTART 11) => Define s to a given value.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

11 error> (define (half-adder a b s c)
  (let ((d (make-wire)) (e (make-wire)))
    (or-gate a b d)
    (and-gate a b c)
    (inverter c e)
    (and-gate d e s)
    'ok))
;Value: half-adder

11 error> (define (full-adder a b c-in sum c-out)
  (let ((c1 (make-wire)) 
	(s (make-wire))	
	(c2 (make-wire)))
    (half-adder b c-in s c1)
    (half-adder a s sum c2)
    (or-gate c1 c2 c-out)
    'ok))
;Value: full-adder

11 error> ;; (get-signal <wire>) returns the current value of the signal on the wire
;; (set-signal! <wire> <new-value>) changes the value of the signal on the wire to the new value
;; (add-action! <wire> <procedure of no arguments>)
(define (inverter input output)
  (define (invert-input)
    (let ((new-value
	    (logical-not (get-signal input))))
      (after-delay inverter-delay
		   (lambda ()
		     (set-signal! output new-value)))))
  (add-action! input invert-input)
  'ok)
;Value: inverter

11 error> (define (logical-not s)
  (cond ((= s 0) 1)
	 ((= s 1) 0)
	 (else (error "Invaid signal" s))))
;Value: logical-not

11 error> (define (and-gate a1 a2 output)
  (define (and-action-procedure)
    (let ((new-value
	    (logical-and (get-signal a1)
			 (get-signal a2))))
      (after-delay and-gate-delay
		   (lambda ()
		     (set-signal! output new-value)))))
  (add-action! a1 and-action-procedure)
  (add-action! a2 and-action-procedure)
  'ok)
;Value: and-gate

11 error> ;; Representing wires - a message passing style
(define (make-wire)
  (let ((signal-value 0)
	(action-procedures '()))
    (define (set-my-signal! new-value)
      (if (not (= signal-value new-value))
	(begin (set! signal-value new-value)
	       (call-each action-procedures))
	'done))
    (define (accept-action-procedure! proc)
      (set! action-procedures (cons proc action-procedures))
      (proc))
    (define (dispatch m)
      (cond ((eq? m 'get-signal) signal-value)
	    ((eq? m 'set-signal!) set-my-signal!)
	    ((eq? m 'add-action!) accept-action-procedure!)
	    (else (error "Unknown operation: WIRE" m))))
    dispatch))
;Value: make-wire

11 error> (define (call-each procedures)
  (if (null? procedures)
    'done
    (begin ((car procedures))
	   (call-each (cdr procedures)))))
;Value: call-each

11 error> ;; syntactic sugar
(define (get-signal wire)
  (wire 'get-signal))
;Value: get-signal

11 error> (define (set-signal! wire new-value)
  ((wire 'set-signal!) new-value))
;Value: set-signal!

11 error> (define (add-action! wire action-procedure)
  ((wire 'add-action!) action-procedure))
;Value: add-action!

11 error> ;; The agenda
;; (add-to-agenda! <time> <action> <agenda>)
(define (after-delay delay action)
  (add-to-agenda!
    (+ delay (current-time the-agenda))
    action
    the-agenda))
;Value: after-delay

11 error> (define (propogate)
  (if (empty-agenda? the-agenda)
    'done
    (let ((first-item (first-agenda-item the-agenda)))
      (first-item)
      (remove-first-agenda-item! the-agenda)
      (propogate))))
;Value: propogate

11 error> ;; A sample simulation
(define (probe name wire)
  (add-action! wire (lambda ()
		      (newline)
		      (display name)
		      (display " ")
		      (display (current-time the-agenda))
		      (display " New-value = ")
		      (display (get-signal wire)))))
;Value: probe

11 error> (define the-agenda (make-agenda))
;Unbound variable: make-agenda
;To continue, call RESTART with an option number:
; (RESTART 13) => Specify a value to use instead of make-agenda.
; (RESTART 12) => Define make-agenda to a given value.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

12 error> (define inverter-delay 2)
;Value: inverter-delay

12 error> (define and-gate-delay 3)
;Value: and-gate-delay

12 error> (define or-gate-delay 5)
;Value: or-gate-delay

12 error> (define input-1 (make-wire))
;Value: input-1

12 error> (define input-2 (make-wire))
;Value: input-2

12 error> (define sum (make-wire))
;Value: sum

12 error> (define carry (make-wire))
;Value: carry

12 error> (probe 'sum sum)
sum 
;Unbound variable: the-agenda
;To continue, call RESTART with an option number:
; (RESTART 14) => Specify a value to use instead of the-agenda.
; (RESTART 13) => Define the-agenda to a given value.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

13 error> (probe 'carry carry)
carry 
;Unbound variable: the-agenda
;To continue, call RESTART with an option number:
; (RESTART 15) => Specify a value to use instead of the-agenda.
; (RESTART 14) => Define the-agenda to a given value.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

14 error> (half-adder input-1 input-2 sum carry)
;Unbound variable: or-gate
;To continue, call RESTART with an option number:
; (RESTART 16) => Specify a value to use instead of or-gate.
; (RESTART 15) => Define or-gate to a given value.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

15 error> (set-signal! input-1 1)
;Value: done

15 error> (propogate)
;Unbound variable: the-agenda
;To continue, call RESTART with an option number:
; (RESTART 17) => Specify a value to use instead of the-agenda.
; (RESTART 16) => Define the-agenda to a given value.
; (RESTART 15) => Return to read-eval-print level 15.
; (RESTART 14) => Return to read-eval-print level 14.
; (RESTART 13) => Return to read-eval-print level 13.
; (RESTART 12) => Return to read-eval-print level 12.
; (RESTART 11) => Return to read-eval-print level 11.
; (RESTART 10) => Return to read-eval-print level 10.
; (RESTART 9) => Return to read-eval-print level 9.
; (RESTART 8) => Return to read-eval-print level 8.
; (RESTART 7) => Return to read-eval-print level 7.
; (RESTART 6) => Return to read-eval-print level 6.
; (RESTART 5) => Return to read-eval-print level 5.
; (RESTART 4) => Return to read-eval-print level 4.
; (RESTART 3) => Return to read-eval-print level 3.
; (RESTART 2) => Return to read-eval-print level 2.
; (RESTART 1) => Return to read-eval-print level 1.

16 error> ;; Implementing the agenda
(define (make-time-segment time queue)
  (cons time queue))
;Value: make-time-segment

16 error> (define (segment-time s) (car s))
;Value: segment-time

16 error> (define (segment-queue s) (cdr s))
;Value: segment-queue

16 error> (define (make-agenda) (list 0))
;Value: make-agenda

16 error> (define (current-time agenda) (car agenda))
;Value: current-time

16 error> (define (set-current-time! agenda time)
  (set-car! agenda time))
;Value: set-current-time!

16 error> (define (segments agenda) (cdr agenda))
;Value: segments

16 error> (define (set-segments! agenda segments)
  (set-cdr! agenda segments))
;Value: set-segments!

16 error> (define (first-segment agenda)
  (car (segments agenda)))
;Value: first-segment

16 error> (define (rest-segments agenda)
  (cdr (segments agenda)))
;Value: rest-segments

16 error> (define (empty-agenda? agenda)
  (null? (segments agenda)))
;Value: empty-agenda?

16 error> (define (add-to-agenda! time action agenda)
  (define (belong-before? segments)
    (or (null? segments)
	(< time (segment-time (car segments)))))
  (define (make-new-time-segment time action)
    (let ((q (make-queue)))
      (insert-queue! q action)
      (make-time-segment time q)))
  (define (add-to-segments! segments)
    (if (= (segment-time (car segments)) time)
      (insert-queue! (segment-queue (car segments)) action)
      (let ((rest (cdr segments)))
	(if (belongs-before? rest)
	  (set-cdr! segments (cons (make-new-time-segment time action) (cdr segments)))
	  (add-to-segments! rest)))))
  (let ((segments (segments agenda)))
    (if (belongs-before? segments)
      (set-segments! agenda (cons (make-new-time-segment time action) segments))
      (add-to-segments! segments))))
;Value: add-to-agenda!

16 error> (define (remove-first-agenda-item! agenda)
  (let ((q (segment-queue
	     (first-segment agenda))))
    (delete-queue! q)
    (if (empty? q)
      (set-segments! agenda
		     (rest-segments agenda)))))
;Value: remove-first-agenda-item!

16 error> (define (first-agenda-item agenda)
  (if (empty-agenda? agenda)
    (error "Agenda is empty: FIRST-AGENDA-ITEM")
    (let ((first-seg (first-segment agenda)))
      (set-current-time! agenda (segment-time first-seg))
      (front-queue (segment-queue first-seg)))))
;Value: first-agenda-item

16 error> 
End of input stream reached.
Moriturus te saluto.
