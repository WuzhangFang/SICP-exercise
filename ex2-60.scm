;;; Exercise 2.60
; Sets with duplicates
(define (element-of-set? x set)
  (cond ((null? set) false)
	((equal? x (car set)) true)
	(else (element-of-set? x (cdr set)))))
(define (adjoin-set x set)
    (cons x set))
(define (intersection-set set1 set2)
  (cond ((or (null? set1) (null? set2)) 
	 '())
	((element-of-set? (car set1) set2)
	 (cons (car set1)
	       (intersection-set (cdr set1)
				 set2)))
	(else (intersection-set (cdr set1)
				set2))))
(define (union-set set1 set2)
  (append set1 set2))
; test	
(define set1 '(a b c d))
(define set2 '(d d e f g))
(element-of-set? 'a set1)
(element-of-set? 'g set1)
(adjoin-set 'h set1)
(intersection-set set1 set2)
(union-set set1 set2)
