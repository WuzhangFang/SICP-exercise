;;; Exercise 2.11
(load "ex2-8.scm")
(define (mul-interval x y)
    (let ((lx (lower-bound x))
          (ux (upper-bound x))
          (ly (lower-bound y))
          (uy (upper-bound y)))
    (cond ((and (negative-interval? x) (negative-interval? y)) (make-interval (* ux uy) (* lx ly)))
          ((and (positive-interval? x) (positive-interval? y)) (make-interval (* lx ly) (* ux uy)))
          ((and (span-zero? x) (positive-interval? y)) (make-interval (* lx uy) (* ux uy)))
          ((and (positive-interval? x) (span-zero? y)) (make-interval (* ux ly) (* ux uy)))
          ((and (negative-interval? x) (positive-interval? y)) (make-interval (* lx uy) (* ux ly)))
          ((and (positive-interval? x) (negative-interval? y)) (make-interval (* ux uy) (* lx ly)))
          ((and (span-zero? x) (negative-interval? y)) (make-interval (* ux ly) (* lx ly)))
          ((and (negative-interval? x) (span-zero? y)) (make-interval (* lx uy) (* lx ly)))
          ((else) (make-interval (min (* lx uy) (* ux ly)) (max (* ux uy) (* lx ly))))) ; span-zero and span-zero
))
(define (span-zero? x)
    (and (>= (upper-bound x) 0) (<= (lower-bound x) 0)))
(define (positive-interval? x)
    (>= (lower-bound x) 0))
(define (negative-interval? x)
    (<= (upper-bound x) 0))
