;; Exercise 3.22
;; build a queue using local state
;; front-ptr serves as a queue as well
(define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '()))
        (define (empty-queue?)
            (null? front-ptr))
        (define (front-queue)
            (if (empty-queue?)
                (error "front called with an empty queue")
                (car front-ptr)))
        (define (insert-queue! item)
          (let ((new-pair (cons item '())))
            (cond ((empty-queue?)
                        (set! front-ptr new-pair)
                        (set! rear-ptr new-pair)
                        front-ptr)
                   (else
                        (set-cdr! rear-ptr new-pair)
                        (set! rear-ptr new-pair)
                        front-ptr))))
        (define (delete-queue!)
            (cond ((empty-queue?)
                    (error "DELETE! called with an empty queue" front-ptr))
                  (else
                    (set! front-ptr (cdr front-ptr))
                    front-ptr)))
        (define (dispatch m)
            (cond ((eq? m 'empty-queue?) empty-queue?)
                  ((eq? m 'insert-queue!) insert-queue!)
                  ((eq? m 'delete-queue!) delete-queue!)
                  ((eq? m 'front-queue) front-queue)
                  (else (error "Unknown operation for queue"))))
dispatch))
;; test
(define q (make-queue))
((q 'insert-queue!) 'a)
((q 'insert-queue!) 'b)
((q 'insert-queue!) 'c)
((q 'delete-queue!))
